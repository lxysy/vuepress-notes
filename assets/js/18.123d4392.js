(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{436:function(a,s,t){"use strict";t.r(s);var e=t(2),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"使用pnpm快速搭建monorepo项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用pnpm快速搭建monorepo项目"}},[a._v("#")]),a._v(" 使用pnpm快速搭建monorepo项目")]),a._v(" "),s("h2",{attrs:{id:"创建主项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建主项目"}},[a._v("#")]),a._v(" 创建主项目")]),a._v(" "),s("p",[a._v("1."),s("code",[a._v("mkdir monorepo-demo && cd monorepo-demo")])]),a._v(" "),s("p",[a._v("2."),s("code",[a._v("pnpm init")])]),a._v(" "),s("p",[a._v("创建一个packages目录作为我们的子项目目录使用：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("├── package.json\n├── packages\n│   ├── components\n│   └── utils\n")])])]),s("p",[a._v("添加"),s("code",[a._v(".gitignore")]),a._v(",需要考虑子目录下的情况")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("/**/node_modules/\n")])])]),s("p",[a._v("配置工作空间（"),s("code",[a._v("workspace")]),a._v("）,在主目录下传见一个"),s("code",[a._v("pnpm-workspace.yaml")]),a._v("文件,"),s("code",[a._v("workspace:*")]),a._v("和"),s("code",[a._v("workspace:^")]),a._v("都表示使用工作区中的子包，前者接任何版本，后者则是最新的版本")]),a._v(" "),s("blockquote",[s("p",[a._v("pnpm内置了对单一存储库的支持，你可以创建一个"),s("code",[a._v("workspace")]),a._v("将多个项目合并到一个仓库中")])]),a._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("packages")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'packages/*'")]),a._v("\n")])])]),s("h2",{attrs:{id:"安装依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖"}},[a._v("#")]),a._v(" 安装依赖")]),a._v(" "),s("p",[a._v("1.全局共用依赖")]),a._v(" "),s("p",[a._v("在多个子项目中使用到的依赖，如lodash,dayjs等，使用全局安装的方式，这样所有子项目都可以直接引入使用（依赖安装在主目录下）")]),a._v(" "),s("blockquote",[s("p",[a._v("如果在全局安装依赖和子项目中的依赖相同，pnpm会自动优化处理，通过软链接的方式安装，不会重复安装依赖")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" i dayjs "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Dw")]),a._v("\n")])])]),s("ul",[s("li",[s("p",[s("code",[a._v("pnpm i")]),a._v(" 和 "),s("code",[a._v("pnpm add")]),a._v("功能相同")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-D")]),a._v(":作为开发依赖使用")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-w")]),a._v(":表示把包安装在"),s("code",[a._v("root")]),a._v("下，该包会放置在"),s("code",[a._v("<root>/node_modules")])])])]),a._v(" "),s("p",[a._v("2.单一子项目依赖")]),a._v(" "),s("p",[a._v("当子项目中存在独有的依赖时，可将依赖安装到子项目中")]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("对于多个子项目中欧给你是否会存在相同依赖，是否会重复安装，无需关心，"),s("code",[a._v("pnpm")]),a._v("会处理")]),a._v(" "),s("li",[s("code",[a._v("pnpm")]),a._v("会优先保证只下载一个依赖")])])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装包到目标子项目下 name为对应子项目中package.json中的name")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("package-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("target-package-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" lodash "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" utils\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除操作")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" lodash "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--filter")]),a._v(" utils\n")])])]),s("ul",[s("li",[a._v("--filter:过滤，用于将命令限制于特定的子集")])]),a._v(" "),s("p",[a._v("3.子项目相互作为依赖(核心)")]),a._v(" "),s("p",[a._v("子项目直接是单独管理的，但子项目又不是完全独立的，他们之间存在着一些相互依赖的关系。如组件代码依赖与工具类的一些方法，文档网站又依赖于组件和工具类。")]),a._v(" "),s("p",[a._v("为了实现和使用远程npm包一样的效果，避免修改代码后，发布、重新安装依赖来本地调试，使用pnpm的工作空间（workspace）可以实现本地调试。")]),a._v(" "),s("p",[a._v("执行如下命令")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" @mono-demo/utils "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" @mono-demo/components\n")])])]),s("p",[a._v("完成后"),s("code",[a._v("@mono-demo/components")]),a._v("的"),s("code",[a._v("package.json")]),a._v("改变")]),a._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"@mono-demo/components"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1.0.0"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"description"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"main"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"index.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"test"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"echo \\"Error: no test specified\\" && exit 1"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"author"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"license"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ISC"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"dependencies"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"@mono-demo/utils"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"workspace:^"')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("code",[a._v('"@mono-dem')]),a._v("工作空间协议写法，它实现了当utils子项目中的代码更新，你在components中引用的代码也是最新的")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("npm")]),a._v("版本规范：")]),a._v(" "),s("ul",[s("li",[a._v("主版本号("),s("code",[a._v("alpha")]),a._v("):当你做了不兼容的API更改")]),a._v(" "),s("li",[a._v("次版本号("),s("code",[a._v("beta")]),a._v("):当你做了向下兼容的功能性新增")]),a._v(" "),s("li",[a._v("修订号("),s("code",[a._v("rc")]),a._v("):当你做了向下兼容的问题修正")])]),a._v(" "),s("p",[s("code",[a._v("npm")]),a._v("版本匹配策略：")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("^1.0.1")]),a._v(": 主版本匹配（1.X）")]),a._v(" "),s("li",[s("code",[a._v("~1.0.1")]),a._v(": 主、次版本一致匹配（1.1.X）")]),a._v(" "),s("li",[s("code",[a._v("*")]),a._v(": 全匹配，不受版本号影响，命中一切新发布的版本号")])])]),a._v(" "),s("p",[s("code",[a._v("workspace")]),a._v("也是符合"),s("code",[a._v("npm")]),a._v("版本规范的，从开发调试的角度考虑，各个子项目之前的依赖引用都应该是最新的的代码")]),a._v(" "),s("p",[a._v("安装时就可指定版本匹配策略")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" @mono-demo/utils@* "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" @mono-demo/components\n")])])]),s("h2",{attrs:{id:"lerna"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[a._v("#")]),a._v(" lerna")]),a._v(" "),s("p",[a._v("简介：Lerna是一个用来优化托管在git/npm上的多packages代码库的工作流的一个管理工具，可以让你在主项目下管理多个子项目，从而解决了多包相互以来，且发布时需要手动维护多个包的问题")]),a._v(" "),s("p",[a._v("在lerna中可直接进行模块的引入和调试（实现原理参考fs.symLinkSync(target,path,type)）")]),a._v(" "),s("p",[a._v("lerna是JS生态系统中最初的　monorepo/workspace　工具，当他在2015／2016年创建时，当时的生态中没有内置的功能来处理单个存储库中的多个包，像"),s("code",[a._v("lerna bootstrap")]),a._v(" "),s("code",[a._v("lerna add")]),a._v(" "),s("code",[a._v("lerna link")]),a._v("这样的命令都是"),s("code",[a._v("lerna")]),a._v("的关键部分。经过之后"),s("code",[a._v("npm")]),a._v(" "),s("code",[a._v("pnpm")]),a._v(" "),s("code",[a._v("yarn")]),a._v("的发展后，这些功能逐渐被包管理器实现，且在"),s("code",[a._v("lerna v7")]),a._v("及以上版本停用了这些指令。"),s("code",[a._v("lerna")]),a._v("重心则在版本控制和发布")]),a._v(" "),s("p",[a._v("若加入lerna和nx进行管理，按照如下步骤：")]),a._v(" "),s("h3",{attrs:{id:"安装lerna和nx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装lerna和nx"}},[a._v("#")]),a._v(" 安装lerna和nx")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" i lerna "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Dw")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pnpm")]),a._v(" i nx "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-Dw")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 默认安装的版本")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"lerna"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^8.0.1"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"nx"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^17.2.6"')]),a._v("\n")])])]),s("h3",{attrs:{id:"常用命令如下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令如下"}},[a._v("#")]),a._v(" 常用命令如下")]),a._v(" "),s("p",[a._v("添加子包依赖或者公共依赖时使用以上提到的"),s("code",[a._v("pnpm add -F")])]),a._v(" "),s("p",[a._v("1.初始化项目")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("lerna init\n")])])]),s("p",[a._v("2.创建一个由lerna管理的包")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 实际上和手动在packages目录下创建项目相同")]),a._v("\nlerna create "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[a._v("6.在对应的packages中执行命令")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("lerna "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--scope")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("package-b "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" run start\n")])])]),s("p",[a._v("7.显示所有安装的包")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("lerna list\n")])])]),s("p",[a._v("8.从所有包中清除node_modules目录，不会清除根目录下的node_modules")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("lerna clean\n")])])]),s("p",[a._v("9.发布项目中的所有包")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("lerna publish\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);